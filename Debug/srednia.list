
srednia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800214c  0800214c  0001214c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800217c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  20000010  0800218c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000180  0800218c  00020180  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ddd0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027be  00000000  00000000  0002de09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006cbd  00000000  00000000  000305c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a80  00000000  00000000  00037288  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce8  00000000  00000000  00037d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c8f  00000000  00000000  000389f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000393f  00000000  00000000  0003e67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041fbe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eb4  00000000  00000000  0004203c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002134 	.word	0x08002134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002134 	.word	0x08002134

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_ADC1_Init+0x48>)
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_ADC1_Init+0x4c>)
{
 800060c:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000610:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8000612:	6003      	str	r3, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
{
 8000618:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	9401      	str	r4, [sp, #4]
 800061c:	9402      	str	r4, [sp, #8]
 800061e:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000622:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000626:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800062a:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	f000 fcd0 	bl	8000fd0 <HAL_ADC_Init>
 8000630:	b108      	cbz	r0, 8000636 <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8000632:	f000 f99b 	bl	800096c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000636:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	a901      	add	r1, sp, #4
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_0;
 800063c:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063e:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000640:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	f000 fb59 	bl	8000cf8 <HAL_ADC_ConfigChannel>
 8000646:	b108      	cbz	r0, 800064c <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8000648:	f000 f990 	bl	800096c <Error_Handler>
  }

}
 800064c:	b005      	add	sp, #20
 800064e:	bd30      	pop	{r4, r5, pc}
 8000650:	20000044 	.word	0x20000044
 8000654:	40012400 	.word	0x40012400

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b530      	push	{r4, r5, lr}
 800065a:	4605      	mov	r5, r0
 800065c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2210      	movs	r2, #16
 8000660:	2100      	movs	r1, #0
 8000662:	a802      	add	r0, sp, #8
 8000664:	f001 fd5e 	bl	8002124 <memset>
  if(adcHandle->Instance==ADC1)
 8000668:	682a      	ldr	r2, [r5, #0]
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <HAL_ADC_MspInit+0x88>)
 800066c:	429a      	cmp	r2, r3
 800066e:	d134      	bne.n	80006da <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000670:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000674:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000682:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800068c:	4c16      	ldr	r4, [pc, #88]	; (80006e8 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	f042 0204 	orr.w	r2, r2, #4
 8000692:	619a      	str	r2, [r3, #24]
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f000 fe7f 	bl	80013a8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b2:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ba:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80006bc:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006be:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c0:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c2:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c4:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c6:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c8:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006cc:	f000 fd6a 	bl	80011a4 <HAL_DMA_Init>
 80006d0:	b108      	cbz	r0, 80006d6 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80006d2:	f000 f94b 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	622c      	str	r4, [r5, #32]
 80006d8:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	b007      	add	sp, #28
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	40012400 	.word	0x40012400
 80006e4:	40010800 	.word	0x40010800
 80006e8:	20000074 	.word	0x20000074
 80006ec:	40020008 	.word	0x40020008

080006f0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_DMA_Init+0x2c>)
{
 80006f2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f4:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006f6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f8:	f042 0201 	orr.w	r2, r2, #1
 80006fc:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000700:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800070c:	f000 fcf2 	bl	80010f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000710:	200b      	movs	r0, #11
 8000712:	f000 fd23 	bl	800115c <HAL_NVIC_EnableIRQ>

}
 8000716:	b003      	add	sp, #12
 8000718:	f85d fb04 	ldr.w	pc, [sp], #4
 800071c:	40021000 	.word	0x40021000

08000720 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2210      	movs	r2, #16
{
 8000722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000724:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	eb0d 0002 	add.w	r0, sp, r2
 800072a:	2100      	movs	r1, #0
 800072c:	f001 fcfa 	bl	8002124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000732:	4e36      	ldr	r6, [pc, #216]	; (800080c <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000736:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000738:	f042 0210 	orr.w	r2, r2, #16
 800073c:	619a      	str	r2, [r3, #24]
 800073e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000740:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	f002 0210 	and.w	r2, r2, #16
 8000746:	9200      	str	r2, [sp, #0]
 8000748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	619a      	str	r2, [r3, #24]
 8000754:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	4f2e      	ldr	r7, [pc, #184]	; (8000810 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	f002 0220 	and.w	r2, r2, #32
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	699a      	ldr	r2, [r3, #24]
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	2403      	movs	r4, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	f042 0204 	orr.w	r2, r2, #4
 8000768:	619a      	str	r2, [r3, #24]
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	f002 0204 	and.w	r2, r2, #4
 8000770:	9202      	str	r2, [sp, #8]
 8000772:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	f042 0208 	orr.w	r2, r2, #8
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	9303      	str	r3, [sp, #12]
 8000786:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000788:	f000 fef0 	bl	800156c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0xf4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000794:	a904      	add	r1, sp, #16
 8000796:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000798:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f000 fe04 	bl	80013a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80007a0:	f641 73ff 	movw	r3, #8191	; 0x1fff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	a904      	add	r1, sp, #16
 80007a6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80007a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f000 fdfc 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7 
 80007b0:	f649 73d2 	movw	r3, #40914	; 0x9fd2
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	a904      	add	r1, sp, #16
 80007b6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7 
 80007b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f000 fdf4 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ca:	a904      	add	r1, sp, #16
 80007cc:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f000 fde9 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80007d6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	a904      	add	r1, sp, #16
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80007de:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f000 fde1 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e6:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	a904      	add	r1, sp, #16
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f0:	f000 fdda 	bl	80013a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f4:	462a      	mov	r2, r5
 80007f6:	4629      	mov	r1, r5
 80007f8:	2028      	movs	r0, #40	; 0x28
 80007fa:	f000 fc7b 	bl	80010f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f000 fcac 	bl	800115c <HAL_NVIC_EnableIRQ>

}
 8000804:	b009      	add	sp, #36	; 0x24
 8000806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	40011000 	.word	0x40011000
 8000814:	10110000 	.word	0x10110000
 8000818:	40010c00 	.word	0x40010c00
 800081c:	40011400 	.word	0x40011400

08000820 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000820:	2228      	movs	r2, #40	; 0x28
{
 8000822:	b530      	push	{r4, r5, lr}
 8000824:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	eb0d 0002 	add.w	r0, sp, r2
 800082a:	2100      	movs	r1, #0
 800082c:	f001 fc7a 	bl	8002124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000832:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	eb0d 0002 	add.w	r0, sp, r2
 8000838:	2100      	movs	r1, #0
 800083a:	f001 fc73 	bl	8002124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083e:	462a      	mov	r2, r5
 8000840:	2100      	movs	r1, #0
 8000842:	a801      	add	r0, sp, #4
 8000844:	f001 fc6e 	bl	8002124 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800084e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000854:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f000 fe98 	bl	8001590 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086a:	4621      	mov	r1, r4
 800086c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	f001 f865 	bl	8001944 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800087a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000880:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000882:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	f001 f91c 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000888:	b015      	add	sp, #84	; 0x54
 800088a:	bd30      	pop	{r4, r5, pc}

0800088c <main>:
{
 800088c:	b508      	push	{r3, lr}
  HAL_Init();
 800088e:	f000 f9d3 	bl	8000c38 <HAL_Init>
  SystemClock_Config();
 8000892:	f7ff ffc5 	bl	8000820 <SystemClock_Config>
  MX_GPIO_Init();
 8000896:	f7ff ff43 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 800089a:	f7ff ff29 	bl	80006f0 <MX_DMA_Init>
  MX_ADC1_Init();
 800089e:	f7ff feb3 	bl	8000608 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80008a2:	f000 f959 	bl	8000b58 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80008a6:	f000 f8fb 	bl	8000aa0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80008aa:	f000 f8c3 	bl	8000a34 <MX_TIM3_Init>
  HAL_TIM_Base_Start(&htim3);
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <main+0x34>)
 80008b0:	f001 f9f2 	bl	8001c98 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,&wynik,1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	4903      	ldr	r1, [pc, #12]	; (80008c4 <main+0x38>)
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <main+0x3c>)
 80008ba:	f000 fad9 	bl	8000e70 <HAL_ADC_Start_DMA>
 80008be:	e7fe      	b.n	80008be <main+0x32>
 80008c0:	200000fc 	.word	0x200000fc
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	20000044 	.word	0x20000044

080008cc <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback()
{
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	count++;
 80008d0:	4a1e      	ldr	r2, [pc, #120]	; (800094c <HAL_SYSTICK_Callback+0x80>)
 80008d2:	4e1f      	ldr	r6, [pc, #124]	; (8000950 <HAL_SYSTICK_Callback+0x84>)
 80008d4:	7813      	ldrb	r3, [r2, #0]
 80008d6:	4c1f      	ldr	r4, [pc, #124]	; (8000954 <HAL_SYSTICK_Callback+0x88>)
 80008d8:	3301      	adds	r3, #1
 80008da:	b2db      	uxtb	r3, r3
		if(count<=100){
 80008dc:	2b64      	cmp	r3, #100	; 0x64
	count++;
 80008de:	7013      	strb	r3, [r2, #0]
		if(count<=100){
 80008e0:	d823      	bhi.n	800092a <HAL_SYSTICK_Callback+0x5e>

		  srednia=(prev*(cons-1)+wynik)/cons;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <HAL_SYSTICK_Callback+0x8c>)
 80008e4:	4f1d      	ldr	r7, [pc, #116]	; (800095c <HAL_SYSTICK_Callback+0x90>)
 80008e6:	f893 8000 	ldrb.w	r8, [r3]
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <HAL_SYSTICK_Callback+0x94>)
 80008ec:	f108 30ff 	add.w	r0, r8, #4294967295
 80008f0:	681d      	ldr	r5, [r3, #0]
 80008f2:	f7ff fce5 	bl	80002c0 <__aeabi_i2f>
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	f7ff fd36 	bl	8000368 <__aeabi_fmul>
 80008fc:	4681      	mov	r9, r0
 80008fe:	4628      	mov	r0, r5
 8000900:	f7ff fcda 	bl	80002b8 <__aeabi_ui2f>
 8000904:	4601      	mov	r1, r0
 8000906:	4648      	mov	r0, r9
 8000908:	f7ff fc26 	bl	8000158 <__addsf3>
 800090c:	4681      	mov	r9, r0
 800090e:	4640      	mov	r0, r8
 8000910:	f7ff fcd6 	bl	80002c0 <__aeabi_i2f>
 8000914:	4601      	mov	r1, r0
 8000916:	4648      	mov	r0, r9
 8000918:	f7ff fdda 	bl	80004d0 <__aeabi_fdiv>
 800091c:	6030      	str	r0, [r6, #0]
		  prev=srednia;
 800091e:	6038      	str	r0, [r7, #0]
		  c=c+wynik;
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	4428      	add	r0, r5
 8000924:	6020      	str	r0, [r4, #0]
 8000926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		else
		{
			count=0;
 800092a:	2500      	movs	r5, #0
			pomiar=srednia;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_SYSTICK_Callback+0x98>)
			count=0;
 800092e:	7015      	strb	r5, [r2, #0]
			pomiar=srednia;
 8000930:	6832      	ldr	r2, [r6, #0]
			arytmetyczna=c/100;
 8000932:	6820      	ldr	r0, [r4, #0]
			pomiar=srednia;
 8000934:	601a      	str	r2, [r3, #0]
			arytmetyczna=c/100;
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	fb90 f0f3 	sdiv	r0, r0, r3
 800093c:	f7ff fcc0 	bl	80002c0 <__aeabi_i2f>
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_SYSTICK_Callback+0x9c>)
			c=0;
 8000942:	6025      	str	r5, [r4, #0]
			arytmetyczna=c/100;
 8000944:	6018      	str	r0, [r3, #0]
 8000946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800094a:	bf00      	nop
 800094c:	20000034 	.word	0x20000034
 8000950:	20000040 	.word	0x20000040
 8000954:	20000030 	.word	0x20000030
 8000958:	20000000 	.word	0x20000000
 800095c:	2000003c 	.word	0x2000003c
 8000960:	200000b8 	.word	0x200000b8
 8000964:	20000038 	.word	0x20000038
 8000968:	2000002c 	.word	0x2000002c

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_MspInit+0x3c>)
{
 8000972:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000974:	699a      	ldr	r2, [r3, #24]
 8000976:	f042 0201 	orr.w	r2, r2, #1
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	f002 0201 	and.w	r2, r2, #1
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	69da      	ldr	r2, [r3, #28]
 8000988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098c:	61da      	str	r2, [r3, #28]
 800098e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800099a:	6853      	ldr	r3, [r2, #4]
 800099c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	b002      	add	sp, #8
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <NMI_Handler>:
 80009b4:	4770      	bx	lr

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler>

080009be <SVC_Handler>:
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_Callback();
 80009c6:	f7ff ff81 	bl	80008cc <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 80009ce:	f000 b945 	b.w	8000c5c <HAL_IncTick>
	...

080009d4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d4:	4801      	ldr	r0, [pc, #4]	; (80009dc <DMA1_Channel1_IRQHandler+0x8>)
 80009d6:	f000 bc53 	b.w	8001280 <HAL_DMA_IRQHandler>
 80009da:	bf00      	nop
 80009dc:	20000074 	.word	0x20000074

080009e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e4:	f000 bdc8 	b.w	8001578 <HAL_GPIO_EXTI_IRQHandler>

080009e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0x40>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	f042 0201 	orr.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009f2:	6859      	ldr	r1, [r3, #4]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <SystemInit+0x44>)
 80009f6:	400a      	ands	r2, r1
 80009f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a04:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a0c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000a14:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SystemInit+0x48>)
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	f8ff0000 	.word	0xf8ff0000
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	2210      	movs	r2, #16
 8000a38:	2100      	movs	r1, #0
 8000a3a:	a802      	add	r0, sp, #8
 8000a3c:	f001 fb72 	bl	8002124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 9999;
 8000a40:	f242 720f 	movw	r2, #9999	; 0x270f
  htim3.Instance = TIM3;
 8000a44:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 9999;
 8000a46:	4915      	ldr	r1, [pc, #84]	; (8000a9c <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 9999;
 8000a4a:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 63;
 8000a4e:	223f      	movs	r2, #63	; 0x3f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 63;
 8000a56:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a5c:	f001 f966 	bl	8001d2c <HAL_TIM_Base_Init>
 8000a60:	b108      	cbz	r0, 8000a66 <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 8000a62:	f7ff ff83 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6a:	a902      	add	r1, sp, #8
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a70:	f001 f9f4 	bl	8001e5c <HAL_TIM_ConfigClockSource>
 8000a74:	b108      	cbz	r0, 8000a7a <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8000a76:	f7ff ff79 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	4669      	mov	r1, sp
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a86:	f001 fa7d 	bl	8001f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	b108      	cbz	r0, 8000a90 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f7ff ff6e 	bl	800096c <Error_Handler>
  }

}
 8000a90:	b007      	add	sp, #28
 8000a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a96:	bf00      	nop
 8000a98:	200000fc 	.word	0x200000fc
 8000a9c:	40000400 	.word	0x40000400

08000aa0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000aa0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	2400      	movs	r4, #0
{
 8000aa4:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa6:	221c      	movs	r2, #28
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	9401      	str	r4, [sp, #4]
 8000aae:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	f001 fb38 	bl	8002124 <memset>

  htim4.Instance = TIM4;
 8000ab4:	4812      	ldr	r0, [pc, #72]	; (8000b00 <MX_TIM4_Init+0x60>)
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 0;
 8000aba:	e880 0018 	stmia.w	r0, {r3, r4}
  htim4.Init.Period = 0;
 8000abe:	60c4      	str	r4, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000ac4:	f001 f94c 	bl	8001d60 <HAL_TIM_OC_Init>
 8000ac8:	b108      	cbz	r0, 8000ace <MX_TIM4_Init+0x2e>
  {
    Error_Handler();
 8000aca:	f7ff ff4f 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	a901      	add	r1, sp, #4
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ad6:	f001 fa55 	bl	8001f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	b108      	cbz	r0, 8000ae0 <MX_TIM4_Init+0x40>
  {
    Error_Handler();
 8000adc:	f7ff ff46 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ae0:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ae2:	2300      	movs	r3, #0
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ae4:	eb0d 0102 	add.w	r1, sp, r2
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM4_Init+0x60>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aea:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8000aec:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aee:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af2:	f001 f97b 	bl	8001dec <HAL_TIM_OC_ConfigChannel>
 8000af6:	b108      	cbz	r0, 8000afc <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f7ff ff38 	bl	800096c <Error_Handler>
  }

}
 8000afc:	b00a      	add	sp, #40	; 0x28
 8000afe:	bd10      	pop	{r4, pc}
 8000b00:	200000bc 	.word	0x200000bc
 8000b04:	40000800 	.word	0x40000800

08000b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8000b08:	6802      	ldr	r2, [r0, #0]
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_TIM_Base_MspInit+0x24>)
{
 8000b0c:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d10a      	bne.n	8000b28 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b12:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000b16:	69da      	ldr	r2, [r3, #28]
 8000b18:	f042 0202 	orr.w	r2, r2, #2
 8000b1c:	61da      	str	r2, [r3, #28]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b28:	b002      	add	sp, #8
 8000b2a:	4770      	bx	lr
 8000b2c:	40000400 	.word	0x40000400

08000b30 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM4)
 8000b30:	6802      	ldr	r2, [r0, #0]
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_TIM_OC_MspInit+0x24>)
{
 8000b34:	b082      	sub	sp, #8
  if(tim_ocHandle->Instance==TIM4)
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <HAL_TIM_OC_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b3a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	f042 0204 	orr.w	r2, r2, #4
 8000b44:	61da      	str	r2, [r3, #28]
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b50:	b002      	add	sp, #8
 8000b52:	4770      	bx	lr
 8000b54:	40000800 	.word	0x40000800

08000b58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b58:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000b5a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b62:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8000b64:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b68:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b70:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	f001 fa5d 	bl	8002034 <HAL_UART_Init>
 8000b7a:	b118      	cbz	r0, 8000b84 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b80:	f7ff bef4 	b.w	800096c <Error_Handler>
 8000b84:	bd08      	pop	{r3, pc}
 8000b86:	bf00      	nop
 8000b88:	2000013c 	.word	0x2000013c
 8000b8c:	40004400 	.word	0x40004400

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4604      	mov	r4, r0
 8000b94:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	2210      	movs	r2, #16
 8000b98:	2100      	movs	r1, #0
 8000b9a:	a802      	add	r0, sp, #8
 8000b9c:	f001 fac2 	bl	8002124 <memset>
  if(uartHandle->Instance==USART2)
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_UART_MspInit+0x58>)
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d11c      	bne.n	8000be2 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000bac:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bb4:	61da      	str	r2, [r3, #28]
 8000bb6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	699a      	ldr	r2, [r3, #24]
 8000bc4:	f042 0204 	orr.w	r2, r2, #4
 8000bc8:	619a      	str	r2, [r3, #24]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f000 fbe3 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be2:	b006      	add	sp, #24
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40010800 	.word	0x40010800

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_InitTick+0x3c>)
{
 8000bf4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf6:	7818      	ldrb	r0, [r3, #0]
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_InitTick+0x40>)
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c08:	f000 fab6 	bl	8001178 <HAL_SYSTICK_Config>
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	b958      	cbnz	r0, 8000c28 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	2d0f      	cmp	r5, #15
 8000c12:	d809      	bhi.n	8000c28 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	4602      	mov	r2, r0
 8000c16:	4629      	mov	r1, r5
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 fa6a 	bl	80010f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_InitTick+0x44>)
 8000c22:	4620      	mov	r0, r4
 8000c24:	601d      	str	r5, [r3, #0]
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c28:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004
 8000c34:	2000000c 	.word	0x2000000c

08000c38 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x20>)
{
 8000c3a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c46:	f000 fa43 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ffd0 	bl	8000bf0 <HAL_InitTick>
  HAL_MspInit();
 8000c50:	f7ff fe8e 	bl	8000970 <HAL_MspInit>
}
 8000c54:	2000      	movs	r0, #0
 8000c56:	bd08      	pop	{r3, pc}
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x10>)
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_IncTick+0x14>)
 8000c60:	6811      	ldr	r1, [r2, #0]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	440b      	add	r3, r1
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000017c 	.word	0x2000017c
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <HAL_GetTick+0x8>)
 8000c76:	6818      	ldr	r0, [r3, #0]
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000017c 	.word	0x2000017c

08000c80 <HAL_ADC_ConvCpltCallback>:
 8000c80:	4770      	bx	lr

08000c82 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c82:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000c84:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c88:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000c8c:	d11b      	bne.n	8000cc6 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	6892      	ldr	r2, [r2, #8]
 8000c9a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c9e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ca2:	d10c      	bne.n	8000cbe <ADC_DMAConvCplt+0x3c>
 8000ca4:	7b1a      	ldrb	r2, [r3, #12]
 8000ca6:	b952      	cbnz	r2, 8000cbe <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cb2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cb4:	bf5e      	ittt	pl
 8000cb6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000cb8:	f042 0201 	orrpl.w	r2, r2, #1
 8000cbc:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffde 	bl	8000c80 <HAL_ADC_ConvCpltCallback>
 8000cc4:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4718      	bx	r3

08000cd0 <HAL_ADC_ConvHalfCpltCallback>:
 8000cd0:	4770      	bx	lr

08000cd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000cd2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000cd6:	f7ff fffb 	bl	8000cd0 <HAL_ADC_ConvHalfCpltCallback>
 8000cda:	bd08      	pop	{r3, pc}

08000cdc <HAL_ADC_ErrorCallback>:
{
 8000cdc:	4770      	bx	lr

08000cde <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cde:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000ce0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ce2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000cea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000cf2:	f7ff fff3 	bl	8000cdc <HAL_ADC_ErrorCallback>
 8000cf6:	bd08      	pop	{r3, pc}

08000cf8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000cf8:	2300      	movs	r3, #0
{ 
 8000cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000cfc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000cfe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d074      	beq.n	8000df0 <HAL_ADC_ConfigChannel+0xf8>
 8000d06:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000d08:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000d0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d0e:	2d06      	cmp	r5, #6
 8000d10:	6802      	ldr	r2, [r0, #0]
 8000d12:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000d16:	680c      	ldr	r4, [r1, #0]
 8000d18:	d825      	bhi.n	8000d66 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d1a:	442b      	add	r3, r5
 8000d1c:	251f      	movs	r5, #31
 8000d1e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000d20:	3b05      	subs	r3, #5
 8000d22:	409d      	lsls	r5, r3
 8000d24:	ea26 0505 	bic.w	r5, r6, r5
 8000d28:	fa04 f303 	lsl.w	r3, r4, r3
 8000d2c:	432b      	orrs	r3, r5
 8000d2e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d30:	2c09      	cmp	r4, #9
 8000d32:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000d36:	688d      	ldr	r5, [r1, #8]
 8000d38:	d92f      	bls.n	8000d9a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d3a:	2607      	movs	r6, #7
 8000d3c:	4423      	add	r3, r4
 8000d3e:	68d1      	ldr	r1, [r2, #12]
 8000d40:	3b1e      	subs	r3, #30
 8000d42:	409e      	lsls	r6, r3
 8000d44:	ea21 0106 	bic.w	r1, r1, r6
 8000d48:	fa05 f303 	lsl.w	r3, r5, r3
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d50:	f1a4 0310 	sub.w	r3, r4, #16
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d92b      	bls.n	8000db0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	b002      	add	sp, #8
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d66:	2d0c      	cmp	r5, #12
 8000d68:	d80b      	bhi.n	8000d82 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d6a:	442b      	add	r3, r5
 8000d6c:	251f      	movs	r5, #31
 8000d6e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d70:	3b23      	subs	r3, #35	; 0x23
 8000d72:	409d      	lsls	r5, r3
 8000d74:	ea26 0505 	bic.w	r5, r6, r5
 8000d78:	fa04 f303 	lsl.w	r3, r4, r3
 8000d7c:	432b      	orrs	r3, r5
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	e7d6      	b.n	8000d30 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d82:	442b      	add	r3, r5
 8000d84:	251f      	movs	r5, #31
 8000d86:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000d88:	3b41      	subs	r3, #65	; 0x41
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	ea26 0505 	bic.w	r5, r6, r5
 8000d90:	fa04 f303 	lsl.w	r3, r4, r3
 8000d94:	432b      	orrs	r3, r5
 8000d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d98:	e7ca      	b.n	8000d30 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d9a:	2607      	movs	r6, #7
 8000d9c:	6911      	ldr	r1, [r2, #16]
 8000d9e:	4423      	add	r3, r4
 8000da0:	409e      	lsls	r6, r3
 8000da2:	ea21 0106 	bic.w	r1, r1, r6
 8000da6:	fa05 f303 	lsl.w	r3, r5, r3
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6113      	str	r3, [r2, #16]
 8000dae:	e7cf      	b.n	8000d50 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_ADC_ConfigChannel+0xfc>)
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000db6:	6893      	ldr	r3, [r2, #8]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	d4cd      	bmi.n	8000d58 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dbc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dbe:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dc4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dc6:	d1c7      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_ADC_ConfigChannel+0x100>)
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <HAL_ADC_ConfigChannel+0x104>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	4353      	muls	r3, r2
            wait_loop_index--;
 8000dd6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000dd8:	9b01      	ldr	r3, [sp, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0bc      	beq.n	8000d58 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000dde:	9b01      	ldr	r3, [sp, #4]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7f8      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e7b4      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000df0:	2302      	movs	r3, #2
 8000df2:	e7b5      	b.n	8000d60 <HAL_ADC_ConfigChannel+0x68>
 8000df4:	40012400 	.word	0x40012400
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	000f4240 	.word	0x000f4240

08000e00 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000e00:	2300      	movs	r3, #0
{
 8000e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e04:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e06:	6803      	ldr	r3, [r0, #0]
{
 8000e08:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	07d2      	lsls	r2, r2, #31
 8000e0e:	d502      	bpl.n	8000e16 <ADC_Enable+0x16>
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
}
 8000e12:	b002      	add	sp, #8
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	f042 0201 	orr.w	r2, r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <ADC_Enable+0x68>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <ADC_Enable+0x6c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000e28:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	b9c3      	cbnz	r3, 8000e60 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000e2e:	f7ff ff21 	bl	8000c74 <HAL_GetTick>
 8000e32:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	689d      	ldr	r5, [r3, #8]
 8000e38:	f015 0501 	ands.w	r5, r5, #1
 8000e3c:	d1e8      	bne.n	8000e10 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e3e:	f7ff ff19 	bl	8000c74 <HAL_GetTick>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9f5      	bls.n	8000e34 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000e4a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000e56:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e5e:	e7d8      	b.n	8000e12 <ADC_Enable+0x12>
      wait_loop_index--;
 8000e60:	9b01      	ldr	r3, [sp, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	e7e0      	b.n	8000e28 <ADC_Enable+0x28>
 8000e66:	bf00      	nop
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	000f4240 	.word	0x000f4240

08000e70 <HAL_ADC_Start_DMA>:
{
 8000e70:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000e74:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_ADC_Start_DMA+0x108>)
 8000e78:	6802      	ldr	r2, [r0, #0]
{
 8000e7a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e7c:	429a      	cmp	r2, r3
{
 8000e7e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e80:	d002      	beq.n	8000e88 <HAL_ADC_Start_DMA+0x18>
 8000e82:	493e      	ldr	r1, [pc, #248]	; (8000f7c <HAL_ADC_Start_DMA+0x10c>)
 8000e84:	428a      	cmp	r2, r1
 8000e86:	d103      	bne.n	8000e90 <HAL_ADC_Start_DMA+0x20>
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000e8e:	d16e      	bne.n	8000f6e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000e90:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d06c      	beq.n	8000f72 <HAL_ADC_Start_DMA+0x102>
 8000e98:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000e9a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000e9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000ea0:	f7ff ffae 	bl	8000e00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d15d      	bne.n	8000f66 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eac:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000eae:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	f020 0001 	bic.w	r0, r0, #1
 8000eb8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ebc:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ec0:	d104      	bne.n	8000ecc <HAL_ADC_Start_DMA+0x5c>
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <HAL_ADC_Start_DMA+0x108>)
 8000ec4:	6853      	ldr	r3, [r2, #4]
 8000ec6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000eca:	d13e      	bne.n	8000f4a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ece:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ed2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed4:	684b      	ldr	r3, [r1, #4]
 8000ed6:	055a      	lsls	r2, r3, #21
 8000ed8:	d505      	bpl.n	8000ee6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ee8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000eee:	bf18      	it	ne
 8000ef0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ef2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ef4:	bf18      	it	ne
 8000ef6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000efa:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000efc:	2300      	movs	r3, #0
 8000efe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f04:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f06:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_ADC_Start_DMA+0x114>)
 8000f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_ADC_Start_DMA+0x118>)
 8000f0e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f10:	f06f 0302 	mvn.w	r3, #2
 8000f14:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f18:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f24:	4643      	mov	r3, r8
 8000f26:	f000 f96d 	bl	8001204 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f32:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	bf0c      	ite	eq
 8000f3a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f3e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	4630      	mov	r0, r6
 8000f46:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f50:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f52:	6853      	ldr	r3, [r2, #4]
 8000f54:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f56:	bf41      	itttt	mi
 8000f58:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000f5a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000f5e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000f62:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000f64:	e7bf      	b.n	8000ee6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000f6c:	e7ea      	b.n	8000f44 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000f6e:	2601      	movs	r6, #1
 8000f70:	e7e8      	b.n	8000f44 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000f72:	2602      	movs	r6, #2
 8000f74:	e7e6      	b.n	8000f44 <HAL_ADC_Start_DMA+0xd4>
 8000f76:	bf00      	nop
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	40012800 	.word	0x40012800
 8000f80:	08000c83 	.word	0x08000c83
 8000f84:	08000cd3 	.word	0x08000cd3
 8000f88:	08000cdf 	.word	0x08000cdf

08000f8c <ADC_ConversionStop_Disable>:
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f8e:	6803      	ldr	r3, [r0, #0]
{
 8000f90:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	07d2      	lsls	r2, r2, #31
 8000f96:	d401      	bmi.n	8000f9c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000fa4:	f7ff fe66 	bl	8000c74 <HAL_GetTick>
 8000fa8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	07db      	lsls	r3, r3, #31
 8000fb0:	d5f2      	bpl.n	8000f98 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb2:	f7ff fe5f 	bl	8000c74 <HAL_GetTick>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f6      	bls.n	8000faa <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fce:	bd38      	pop	{r3, r4, r5, pc}

08000fd0 <HAL_ADC_Init>:
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d071      	beq.n	80010bc <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000fda:	b923      	cbnz	r3, 8000fe6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000fde:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000fe2:	f7ff fb39 	bl	8000658 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ffd0 	bl	8000f8c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fee:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff4:	d164      	bne.n	80010c0 <HAL_ADC_Init+0xf0>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d162      	bne.n	80010c0 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ffa:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001000:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800100a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800100c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001010:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001012:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001016:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800101a:	d038      	beq.n	800108e <HAL_ADC_Init+0xbe>
 800101c:	2901      	cmp	r1, #1
 800101e:	bf14      	ite	ne
 8001020:	4606      	movne	r6, r0
 8001022:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001026:	7d25      	ldrb	r5, [r4, #20]
 8001028:	2d01      	cmp	r5, #1
 800102a:	d107      	bne.n	800103c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800102c:	2b00      	cmp	r3, #0
 800102e:	d130      	bne.n	8001092 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001030:	69a3      	ldr	r3, [r4, #24]
 8001032:	3b01      	subs	r3, #1
 8001034:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001038:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800103c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800103e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001042:	685d      	ldr	r5, [r3, #4]
 8001044:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001048:	ea45 0506 	orr.w	r5, r5, r6
 800104c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800104e:	689e      	ldr	r6, [r3, #8]
 8001050:	4d1d      	ldr	r5, [pc, #116]	; (80010c8 <HAL_ADC_Init+0xf8>)
 8001052:	ea05 0506 	and.w	r5, r5, r6
 8001056:	ea45 0502 	orr.w	r5, r5, r2
 800105a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800105c:	d001      	beq.n	8001062 <HAL_ADC_Init+0x92>
 800105e:	2901      	cmp	r1, #1
 8001060:	d120      	bne.n	80010a4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001062:	6921      	ldr	r1, [r4, #16]
 8001064:	3901      	subs	r1, #1
 8001066:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001068:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800106a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800106e:	4329      	orrs	r1, r5
 8001070:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001072:	6899      	ldr	r1, [r3, #8]
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_ADC_Init+0xfc>)
 8001076:	400b      	ands	r3, r1
 8001078:	429a      	cmp	r2, r3
 800107a:	d115      	bne.n	80010a8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 800107c:	2300      	movs	r3, #0
 800107e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	62a3      	str	r3, [r4, #40]	; 0x28
 800108c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800108e:	460e      	mov	r6, r1
 8001090:	e7c9      	b.n	8001026 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001092:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010a2:	e7cb      	b.n	800103c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80010a4:	2100      	movs	r1, #0
 80010a6:	e7df      	b.n	8001068 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010aa:	f023 0312 	bic.w	r3, r3, #18
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80010c6:	e7f9      	b.n	80010bc <HAL_ADC_Init+0xec>
 80010c8:	ffe1f7fd 	.word	0xffe1f7fd
 80010cc:	ff1f0efe 	.word	0xff1f0efe

080010d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c1b      	lsrs	r3, r3, #16
 80010e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010ec:	60d3      	str	r3, [r2, #12]
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b530      	push	{r4, r5, lr}
 80010f8:	68dc      	ldr	r4, [r3, #12]
 80010fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	2b04      	cmp	r3, #4
 8001106:	bf28      	it	cs
 8001108:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001110:	bf98      	it	ls
 8001112:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	fa05 f303 	lsl.w	r3, r5, r3
 8001118:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111c:	bf88      	it	hi
 800111e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4019      	ands	r1, r3
 8001122:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	fa05 f404 	lsl.w	r4, r5, r4
 8001128:	3c01      	subs	r4, #1
 800112a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800112c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112e:	ea42 0201 	orr.w	r2, r2, r1
 8001132:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	bfa9      	itett	ge
 8001138:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	4b06      	ldrlt	r3, [pc, #24]	; (8001158 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	b2d2      	uxtbge	r2, r2
 8001140:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	bfbb      	ittet	lt
 8001146:	f000 000f 	andlt.w	r0, r0, #15
 800114a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	541a      	strblt	r2, [r3, r0]
 8001152:	bd30      	pop	{r4, r5, pc}
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	e000ed14 	.word	0xe000ed14

0800115c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800115c:	2800      	cmp	r0, #0
 800115e:	db08      	blt.n	8001172 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001160:	2301      	movs	r3, #1
 8001162:	0942      	lsrs	r2, r0, #5
 8001164:	f000 001f 	and.w	r0, r0, #31
 8001168:	fa03 f000 	lsl.w	r0, r3, r0
 800116c:	4b01      	ldr	r3, [pc, #4]	; (8001174 <HAL_NVIC_EnableIRQ+0x18>)
 800116e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100

08001178 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	3801      	subs	r0, #1
 800117a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800117e:	d20a      	bcs.n	8001196 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011a6:	b330      	cbz	r0, 80011f6 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011a8:	2214      	movs	r2, #20
 80011aa:	6801      	ldr	r1, [r0, #0]
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011ae:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80011bc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80011be:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80011c0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011c2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80011c6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011ca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	4323      	orrs	r3, r4
 80011d0:	6904      	ldr	r4, [r0, #16]
 80011d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d4:	6944      	ldr	r4, [r0, #20]
 80011d6:	4323      	orrs	r3, r4
 80011d8:	6984      	ldr	r4, [r0, #24]
 80011da:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	69c4      	ldr	r4, [r0, #28]
 80011de:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80011e0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011e2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011e4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80011e8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ec:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ee:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
}
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	bf00      	nop
 80011fc:	bffdfff8 	.word	0xbffdfff8
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001206:	f890 4020 	ldrb.w	r4, [r0, #32]
 800120a:	2c01      	cmp	r4, #1
 800120c:	d035      	beq.n	800127a <HAL_DMA_Start_IT+0x76>
 800120e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001210:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001214:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001218:	42a5      	cmp	r5, r4
 800121a:	f04f 0600 	mov.w	r6, #0
 800121e:	f04f 0402 	mov.w	r4, #2
 8001222:	d128      	bne.n	8001276 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001224:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001228:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800122c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001230:	f026 0601 	bic.w	r6, r6, #1
 8001234:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001236:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001238:	40bd      	lsls	r5, r7
 800123a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800123e:	6843      	ldr	r3, [r0, #4]
 8001240:	6805      	ldr	r5, [r0, #0]
 8001242:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001244:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001246:	bf0b      	itete	eq
 8001248:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800124a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800124c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800124e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001250:	b14b      	cbz	r3, 8001266 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001258:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800125a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f043 030a 	orr.w	r3, r3, #10
 8001274:	e7f0      	b.n	8001258 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001276:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800127a:	2002      	movs	r0, #2
}
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001280 <HAL_DMA_IRQHandler>:
{
 8001280:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001282:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001284:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001286:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001288:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800128a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800128c:	4095      	lsls	r5, r2
 800128e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001290:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001292:	d032      	beq.n	80012fa <HAL_DMA_IRQHandler+0x7a>
 8001294:	074d      	lsls	r5, r1, #29
 8001296:	d530      	bpl.n	80012fa <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129c:	bf5e      	ittt	pl
 800129e:	681a      	ldrpl	r2, [r3, #0]
 80012a0:	f022 0204 	bicpl.w	r2, r2, #4
 80012a4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <HAL_DMA_IRQHandler+0x120>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d019      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x60>
 80012ac:	3214      	adds	r2, #20
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d018      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x64>
 80012b2:	3214      	adds	r2, #20
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d017      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x68>
 80012b8:	3214      	adds	r2, #20
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d017      	beq.n	80012ee <HAL_DMA_IRQHandler+0x6e>
 80012be:	3214      	adds	r2, #20
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d017      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x74>
 80012c4:	3214      	adds	r2, #20
 80012c6:	4293      	cmp	r3, r2
 80012c8:	bf0c      	ite	eq
 80012ca:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80012ce:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <HAL_DMA_IRQHandler+0x124>)
 80012d4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80012d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05e      	beq.n	800139a <HAL_DMA_IRQHandler+0x11a>
}
 80012dc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80012de:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012e0:	2304      	movs	r3, #4
 80012e2:	e7f6      	b.n	80012d2 <HAL_DMA_IRQHandler+0x52>
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	e7f4      	b.n	80012d2 <HAL_DMA_IRQHandler+0x52>
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	e7f1      	b.n	80012d2 <HAL_DMA_IRQHandler+0x52>
 80012ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f2:	e7ee      	b.n	80012d2 <HAL_DMA_IRQHandler+0x52>
 80012f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012f8:	e7eb      	b.n	80012d2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012fa:	2502      	movs	r5, #2
 80012fc:	4095      	lsls	r5, r2
 80012fe:	4225      	tst	r5, r4
 8001300:	d035      	beq.n	800136e <HAL_DMA_IRQHandler+0xee>
 8001302:	078d      	lsls	r5, r1, #30
 8001304:	d533      	bpl.n	800136e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	0694      	lsls	r4, r2, #26
 800130a:	d406      	bmi.n	800131a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f022 020a 	bic.w	r2, r2, #10
 8001312:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001314:	2201      	movs	r2, #1
 8001316:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <HAL_DMA_IRQHandler+0x120>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d019      	beq.n	8001354 <HAL_DMA_IRQHandler+0xd4>
 8001320:	3214      	adds	r2, #20
 8001322:	4293      	cmp	r3, r2
 8001324:	d018      	beq.n	8001358 <HAL_DMA_IRQHandler+0xd8>
 8001326:	3214      	adds	r2, #20
 8001328:	4293      	cmp	r3, r2
 800132a:	d017      	beq.n	800135c <HAL_DMA_IRQHandler+0xdc>
 800132c:	3214      	adds	r2, #20
 800132e:	4293      	cmp	r3, r2
 8001330:	d017      	beq.n	8001362 <HAL_DMA_IRQHandler+0xe2>
 8001332:	3214      	adds	r2, #20
 8001334:	4293      	cmp	r3, r2
 8001336:	d017      	beq.n	8001368 <HAL_DMA_IRQHandler+0xe8>
 8001338:	3214      	adds	r2, #20
 800133a:	4293      	cmp	r3, r2
 800133c:	bf0c      	ite	eq
 800133e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001342:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_DMA_IRQHandler+0x124>)
 8001348:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800134a:	2300      	movs	r3, #0
 800134c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001350:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001352:	e7c1      	b.n	80012d8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001354:	2302      	movs	r3, #2
 8001356:	e7f6      	b.n	8001346 <HAL_DMA_IRQHandler+0xc6>
 8001358:	2320      	movs	r3, #32
 800135a:	e7f4      	b.n	8001346 <HAL_DMA_IRQHandler+0xc6>
 800135c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001360:	e7f1      	b.n	8001346 <HAL_DMA_IRQHandler+0xc6>
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	e7ee      	b.n	8001346 <HAL_DMA_IRQHandler+0xc6>
 8001368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136c:	e7eb      	b.n	8001346 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800136e:	2508      	movs	r5, #8
 8001370:	4095      	lsls	r5, r2
 8001372:	4225      	tst	r5, r4
 8001374:	d011      	beq.n	800139a <HAL_DMA_IRQHandler+0x11a>
 8001376:	0709      	lsls	r1, r1, #28
 8001378:	d50f      	bpl.n	800139a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	f021 010e 	bic.w	r1, r1, #14
 8001380:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001382:	2301      	movs	r3, #1
 8001384:	fa03 f202 	lsl.w	r2, r3, r2
 8001388:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800138a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800138c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001390:	2300      	movs	r3, #0
 8001392:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001396:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001398:	e79e      	b.n	80012d8 <HAL_DMA_IRQHandler+0x58>
}
 800139a:	bc70      	pop	{r4, r5, r6}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40020008 	.word	0x40020008
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ac:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80013ae:	4626      	mov	r6, r4
 80013b0:	4b66      	ldr	r3, [pc, #408]	; (800154c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800155c <HAL_GPIO_Init+0x1b4>
 80013b6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001560 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	680a      	ldr	r2, [r1, #0]
 80013bc:	fa32 f506 	lsrs.w	r5, r2, r6
 80013c0:	d102      	bne.n	80013c8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80013c2:	b003      	add	sp, #12
 80013c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80013c8:	f04f 0801 	mov.w	r8, #1
 80013cc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80013d4:	4590      	cmp	r8, r2
 80013d6:	d17f      	bne.n	80014d8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80013d8:	684d      	ldr	r5, [r1, #4]
 80013da:	2d12      	cmp	r5, #18
 80013dc:	f000 80aa 	beq.w	8001534 <HAL_GPIO_Init+0x18c>
 80013e0:	f200 8083 	bhi.w	80014ea <HAL_GPIO_Init+0x142>
 80013e4:	2d02      	cmp	r5, #2
 80013e6:	f000 80a2 	beq.w	800152e <HAL_GPIO_Init+0x186>
 80013ea:	d877      	bhi.n	80014dc <HAL_GPIO_Init+0x134>
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	f000 8089 	beq.w	8001504 <HAL_GPIO_Init+0x15c>
 80013f2:	2d01      	cmp	r5, #1
 80013f4:	f000 8099 	beq.w	800152a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fc:	2aff      	cmp	r2, #255	; 0xff
 80013fe:	bf93      	iteet	ls
 8001400:	4682      	movls	sl, r0
 8001402:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001406:	3d08      	subhi	r5, #8
 8001408:	f8d0 b000 	ldrls.w	fp, [r0]
 800140c:	bf92      	itee	ls
 800140e:	00b5      	lslls	r5, r6, #2
 8001410:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001414:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001416:	fa09 f805 	lsl.w	r8, r9, r5
 800141a:	ea2b 0808 	bic.w	r8, fp, r8
 800141e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001422:	bf88      	it	hi
 8001424:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	ea48 0505 	orr.w	r5, r8, r5
 800142c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001430:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001434:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001438:	d04e      	beq.n	80014d8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800143a:	4d45      	ldr	r5, [pc, #276]	; (8001550 <HAL_GPIO_Init+0x1a8>)
 800143c:	4f44      	ldr	r7, [pc, #272]	; (8001550 <HAL_GPIO_Init+0x1a8>)
 800143e:	69ad      	ldr	r5, [r5, #24]
 8001440:	f026 0803 	bic.w	r8, r6, #3
 8001444:	f045 0501 	orr.w	r5, r5, #1
 8001448:	61bd      	str	r5, [r7, #24]
 800144a:	69bd      	ldr	r5, [r7, #24]
 800144c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001450:	f005 0501 	and.w	r5, r5, #1
 8001454:	9501      	str	r5, [sp, #4]
 8001456:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800145e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001460:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001464:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001468:	fa09 f90b 	lsl.w	r9, r9, fp
 800146c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001470:	4d38      	ldr	r5, [pc, #224]	; (8001554 <HAL_GPIO_Init+0x1ac>)
 8001472:	42a8      	cmp	r0, r5
 8001474:	d063      	beq.n	800153e <HAL_GPIO_Init+0x196>
 8001476:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800147a:	42a8      	cmp	r0, r5
 800147c:	d061      	beq.n	8001542 <HAL_GPIO_Init+0x19a>
 800147e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001482:	42a8      	cmp	r0, r5
 8001484:	d05f      	beq.n	8001546 <HAL_GPIO_Init+0x19e>
 8001486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800148a:	42a8      	cmp	r0, r5
 800148c:	bf0c      	ite	eq
 800148e:	2503      	moveq	r5, #3
 8001490:	2504      	movne	r5, #4
 8001492:	fa05 f50b 	lsl.w	r5, r5, fp
 8001496:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800149a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800149e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80014a4:	bf14      	ite	ne
 80014a6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4395      	biceq	r5, r2
 80014aa:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ae:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80014b2:	bf14      	ite	ne
 80014b4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b6:	4395      	biceq	r5, r2
 80014b8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014bc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c0:	bf14      	ite	ne
 80014c2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014c4:	4395      	biceq	r5, r2
 80014c6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ce:	bf14      	ite	ne
 80014d0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d2:	ea25 0202 	biceq.w	r2, r5, r2
 80014d6:	60da      	str	r2, [r3, #12]
	position++;
 80014d8:	3601      	adds	r6, #1
 80014da:	e76e      	b.n	80013ba <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80014dc:	2d03      	cmp	r5, #3
 80014de:	d022      	beq.n	8001526 <HAL_GPIO_Init+0x17e>
 80014e0:	2d11      	cmp	r5, #17
 80014e2:	d189      	bne.n	80013f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e4:	68cc      	ldr	r4, [r1, #12]
 80014e6:	3404      	adds	r4, #4
          break;
 80014e8:	e786      	b.n	80013f8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80014ea:	4f1b      	ldr	r7, [pc, #108]	; (8001558 <HAL_GPIO_Init+0x1b0>)
 80014ec:	42bd      	cmp	r5, r7
 80014ee:	d009      	beq.n	8001504 <HAL_GPIO_Init+0x15c>
 80014f0:	d812      	bhi.n	8001518 <HAL_GPIO_Init+0x170>
 80014f2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001564 <HAL_GPIO_Init+0x1bc>
 80014f6:	454d      	cmp	r5, r9
 80014f8:	d004      	beq.n	8001504 <HAL_GPIO_Init+0x15c>
 80014fa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80014fe:	454d      	cmp	r5, r9
 8001500:	f47f af7a 	bne.w	80013f8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001504:	688c      	ldr	r4, [r1, #8]
 8001506:	b1c4      	cbz	r4, 800153a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800150a:	bf0c      	ite	eq
 800150c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001510:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2408      	movs	r4, #8
 8001516:	e76f      	b.n	80013f8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001518:	4575      	cmp	r5, lr
 800151a:	d0f3      	beq.n	8001504 <HAL_GPIO_Init+0x15c>
 800151c:	4565      	cmp	r5, ip
 800151e:	d0f1      	beq.n	8001504 <HAL_GPIO_Init+0x15c>
 8001520:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001568 <HAL_GPIO_Init+0x1c0>
 8001524:	e7eb      	b.n	80014fe <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001526:	2400      	movs	r4, #0
 8001528:	e766      	b.n	80013f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800152a:	68cc      	ldr	r4, [r1, #12]
          break;
 800152c:	e764      	b.n	80013f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152e:	68cc      	ldr	r4, [r1, #12]
 8001530:	3408      	adds	r4, #8
          break;
 8001532:	e761      	b.n	80013f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	68cc      	ldr	r4, [r1, #12]
 8001536:	340c      	adds	r4, #12
          break;
 8001538:	e75e      	b.n	80013f8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153a:	2404      	movs	r4, #4
 800153c:	e75c      	b.n	80013f8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800153e:	2500      	movs	r5, #0
 8001540:	e7a7      	b.n	8001492 <HAL_GPIO_Init+0xea>
 8001542:	2501      	movs	r5, #1
 8001544:	e7a5      	b.n	8001492 <HAL_GPIO_Init+0xea>
 8001546:	2502      	movs	r5, #2
 8001548:	e7a3      	b.n	8001492 <HAL_GPIO_Init+0xea>
 800154a:	bf00      	nop
 800154c:	40010400 	.word	0x40010400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800
 8001558:	10210000 	.word	0x10210000
 800155c:	10310000 	.word	0x10310000
 8001560:	10320000 	.word	0x10320000
 8001564:	10110000 	.word	0x10110000
 8001568:	10220000 	.word	0x10220000

0800156c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	b10a      	cbz	r2, 8001572 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156e:	6101      	str	r1, [r0, #16]
 8001570:	4770      	bx	lr
 8001572:	0409      	lsls	r1, r1, #16
 8001574:	e7fb      	b.n	800156e <HAL_GPIO_WritePin+0x2>

08001576 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001578:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	4201      	tst	r1, r0
 8001580:	d002      	beq.n	8001588 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001582:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001584:	f7ff fff7 	bl	8001576 <HAL_GPIO_EXTI_Callback>
 8001588:	bd08      	pop	{r3, pc}
 800158a:	bf00      	nop
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001594:	4605      	mov	r5, r0
 8001596:	b908      	cbnz	r0, 800159c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
 800159a:	e03c      	b.n	8001616 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	07db      	lsls	r3, r3, #31
 80015a0:	d410      	bmi.n	80015c4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	079f      	lsls	r7, r3, #30
 80015a6:	d45d      	bmi.n	8001664 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	0719      	lsls	r1, r3, #28
 80015ac:	f100 8094 	bmi.w	80016d8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	075a      	lsls	r2, r3, #29
 80015b4:	f100 80be 	bmi.w	8001734 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	69e8      	ldr	r0, [r5, #28]
 80015ba:	2800      	cmp	r0, #0
 80015bc:	f040 812c 	bne.w	8001818 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
 80015c2:	e028      	b.n	8001616 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c4:	4c8f      	ldr	r4, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d007      	beq.n	80015e0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d0:	6863      	ldr	r3, [r4, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
 80015da:	6863      	ldr	r3, [r4, #4]
 80015dc:	03de      	lsls	r6, r3, #15
 80015de:	d506      	bpl.n	80015ee <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	039c      	lsls	r4, r3, #14
 80015e4:	d5dd      	bpl.n	80015a2 <HAL_RCC_OscConfig+0x12>
 80015e6:	686b      	ldr	r3, [r5, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1da      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
 80015ec:	e7d4      	b.n	8001598 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	686b      	ldr	r3, [r5, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d112      	bne.n	800161c <HAL_RCC_OscConfig+0x8c>
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb39 	bl	8000c74 <HAL_GetTick>
 8001602:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	0398      	lsls	r0, r3, #14
 8001608:	d4cb      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160a:	f7ff fb33 	bl	8000c74 <HAL_GetTick>
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	2864      	cmp	r0, #100	; 0x64
 8001612:	d9f7      	bls.n	8001604 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001614:	2003      	movs	r0, #3
}
 8001616:	b002      	add	sp, #8
 8001618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	b99b      	cbnz	r3, 8001646 <HAL_RCC_OscConfig+0xb6>
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	6023      	str	r3, [r4, #0]
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800162e:	f7ff fb21 	bl	8000c74 <HAL_GetTick>
 8001632:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	0399      	lsls	r1, r3, #14
 8001638:	d5b3      	bpl.n	80015a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163a:	f7ff fb1b 	bl	8000c74 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	2864      	cmp	r0, #100	; 0x64
 8001642:	d9f7      	bls.n	8001634 <HAL_RCC_OscConfig+0xa4>
 8001644:	e7e6      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	d103      	bne.n	8001656 <HAL_RCC_OscConfig+0xc6>
 800164e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	e7cf      	b.n	80015f6 <HAL_RCC_OscConfig+0x66>
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6023      	str	r3, [r4, #0]
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	e7cb      	b.n	80015fc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001664:	4c67      	ldr	r4, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	f013 0f0c 	tst.w	r3, #12
 800166c:	d007      	beq.n	800167e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d110      	bne.n	800169a <HAL_RCC_OscConfig+0x10a>
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	03da      	lsls	r2, r3, #15
 800167c:	d40d      	bmi.n	800169a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	079b      	lsls	r3, r3, #30
 8001682:	d502      	bpl.n	800168a <HAL_RCC_OscConfig+0xfa>
 8001684:	692b      	ldr	r3, [r5, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d186      	bne.n	8001598 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	696a      	ldr	r2, [r5, #20]
 800168e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001692:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001696:	6023      	str	r3, [r4, #0]
 8001698:	e786      	b.n	80015a8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169a:	692a      	ldr	r2, [r5, #16]
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x278>)
 800169e:	b16a      	cbz	r2, 80016bc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016a4:	f7ff fae6 	bl	8000c74 <HAL_GetTick>
 80016a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	079f      	lsls	r7, r3, #30
 80016ae:	d4ec      	bmi.n	800168a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fae0 	bl	8000c74 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9f7      	bls.n	80016aa <HAL_RCC_OscConfig+0x11a>
 80016ba:	e7ab      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80016bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016be:	f7ff fad9 	bl	8000c74 <HAL_GetTick>
 80016c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	0798      	lsls	r0, r3, #30
 80016c8:	f57f af6e 	bpl.w	80015a8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff fad2 	bl	8000c74 <HAL_GetTick>
 80016d0:	1b80      	subs	r0, r0, r6
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d9f6      	bls.n	80016c4 <HAL_RCC_OscConfig+0x134>
 80016d6:	e79d      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d8:	69aa      	ldr	r2, [r5, #24]
 80016da:	4c4a      	ldr	r4, [pc, #296]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016de:	b1da      	cbz	r2, 8001718 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016e4:	f7ff fac6 	bl	8000c74 <HAL_GetTick>
 80016e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ec:	079b      	lsls	r3, r3, #30
 80016ee:	d50d      	bpl.n	800170c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80016fe:	bf00      	nop
  }
  while (Delay --);
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_RCC_OscConfig+0x16e>
 800170a:	e751      	b.n	80015b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fab2 	bl	8000c74 <HAL_GetTick>
 8001710:	1b80      	subs	r0, r0, r6
 8001712:	2802      	cmp	r0, #2
 8001714:	d9e9      	bls.n	80016ea <HAL_RCC_OscConfig+0x15a>
 8001716:	e77d      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001718:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800171a:	f7ff faab 	bl	8000c74 <HAL_GetTick>
 800171e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001722:	079f      	lsls	r7, r3, #30
 8001724:	f57f af44 	bpl.w	80015b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff faa4 	bl	8000c74 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d9f6      	bls.n	8001720 <HAL_RCC_OscConfig+0x190>
 8001732:	e76f      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001734:	4c33      	ldr	r4, [pc, #204]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 8001736:	69e3      	ldr	r3, [r4, #28]
 8001738:	00d8      	lsls	r0, r3, #3
 800173a:	d424      	bmi.n	8001786 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800173c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	69e3      	ldr	r3, [r4, #28]
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	61e3      	str	r3, [r4, #28]
 8001746:	69e3      	ldr	r3, [r4, #28]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4e30      	ldr	r6, [pc, #192]	; (8001814 <HAL_RCC_OscConfig+0x284>)
 8001752:	6833      	ldr	r3, [r6, #0]
 8001754:	05d9      	lsls	r1, r3, #23
 8001756:	d518      	bpl.n	800178a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	68eb      	ldr	r3, [r5, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d126      	bne.n	80017ac <HAL_RCC_OscConfig+0x21c>
 800175e:	6a23      	ldr	r3, [r4, #32]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001766:	f7ff fa85 	bl	8000c74 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800176e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	6a23      	ldr	r3, [r4, #32]
 8001772:	079b      	lsls	r3, r3, #30
 8001774:	d53f      	bpl.n	80017f6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001776:	2f00      	cmp	r7, #0
 8001778:	f43f af1e 	beq.w	80015b8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	69e3      	ldr	r3, [r4, #28]
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	61e3      	str	r3, [r4, #28]
 8001784:	e718      	b.n	80015b8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2700      	movs	r7, #0
 8001788:	e7e2      	b.n	8001750 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178a:	6833      	ldr	r3, [r6, #0]
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001792:	f7ff fa6f 	bl	8000c74 <HAL_GetTick>
 8001796:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	6833      	ldr	r3, [r6, #0]
 800179a:	05da      	lsls	r2, r3, #23
 800179c:	d4dc      	bmi.n	8001758 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff fa69 	bl	8000c74 <HAL_GetTick>
 80017a2:	eba0 0008 	sub.w	r0, r0, r8
 80017a6:	2864      	cmp	r0, #100	; 0x64
 80017a8:	d9f6      	bls.n	8001798 <HAL_RCC_OscConfig+0x208>
 80017aa:	e733      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	b9ab      	cbnz	r3, 80017da <HAL_RCC_OscConfig+0x24a>
 80017ae:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6223      	str	r3, [r4, #32]
 80017ba:	6a23      	ldr	r3, [r4, #32]
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa57 	bl	8000c74 <HAL_GetTick>
 80017c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	6a23      	ldr	r3, [r4, #32]
 80017ca:	0798      	lsls	r0, r3, #30
 80017cc:	d5d3      	bpl.n	8001776 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fa51 	bl	8000c74 <HAL_GetTick>
 80017d2:	1b80      	subs	r0, r0, r6
 80017d4:	4540      	cmp	r0, r8
 80017d6:	d9f7      	bls.n	80017c8 <HAL_RCC_OscConfig+0x238>
 80017d8:	e71c      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	2b05      	cmp	r3, #5
 80017dc:	6a23      	ldr	r3, [r4, #32]
 80017de:	d103      	bne.n	80017e8 <HAL_RCC_OscConfig+0x258>
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6223      	str	r3, [r4, #32]
 80017e6:	e7ba      	b.n	800175e <HAL_RCC_OscConfig+0x1ce>
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6223      	str	r3, [r4, #32]
 80017ee:	6a23      	ldr	r3, [r4, #32]
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	e7b6      	b.n	8001764 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff fa3d 	bl	8000c74 <HAL_GetTick>
 80017fa:	eba0 0008 	sub.w	r0, r0, r8
 80017fe:	42b0      	cmp	r0, r6
 8001800:	d9b6      	bls.n	8001770 <HAL_RCC_OscConfig+0x1e0>
 8001802:	e707      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
 8001810:	20000004 	.word	0x20000004
 8001814:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x334>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	461c      	mov	r4, r3
 800181e:	f002 020c 	and.w	r2, r2, #12
 8001822:	2a08      	cmp	r2, #8
 8001824:	d03d      	beq.n	80018a2 <HAL_RCC_OscConfig+0x312>
 8001826:	2300      	movs	r3, #0
 8001828:	4e27      	ldr	r6, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800182c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	d12b      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001830:	f7ff fa20 	bl	8000c74 <HAL_GetTick>
 8001834:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	0199      	lsls	r1, r3, #6
 800183a:	d41f      	bmi.n	800187c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800183c:	6a2b      	ldr	r3, [r5, #32]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001844:	6862      	ldr	r2, [r4, #4]
 8001846:	68a9      	ldr	r1, [r5, #8]
 8001848:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800184c:	430a      	orrs	r2, r1
 800184e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001850:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001852:	6862      	ldr	r2, [r4, #4]
 8001854:	430b      	orrs	r3, r1
 8001856:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800185a:	4313      	orrs	r3, r2
 800185c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800185e:	2301      	movs	r3, #1
 8001860:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001862:	f7ff fa07 	bl	8000c74 <HAL_GetTick>
 8001866:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	019a      	lsls	r2, r3, #6
 800186c:	f53f aea8 	bmi.w	80015c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa00 	bl	8000c74 <HAL_GetTick>
 8001874:	1b40      	subs	r0, r0, r5
 8001876:	2802      	cmp	r0, #2
 8001878:	d9f6      	bls.n	8001868 <HAL_RCC_OscConfig+0x2d8>
 800187a:	e6cb      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff f9fa 	bl	8000c74 <HAL_GetTick>
 8001880:	1bc0      	subs	r0, r0, r7
 8001882:	2802      	cmp	r0, #2
 8001884:	d9d7      	bls.n	8001836 <HAL_RCC_OscConfig+0x2a6>
 8001886:	e6c5      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001888:	f7ff f9f4 	bl	8000c74 <HAL_GetTick>
 800188c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	f57f ae95 	bpl.w	80015c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff f9ed 	bl	8000c74 <HAL_GetTick>
 800189a:	1b40      	subs	r0, r0, r5
 800189c:	2802      	cmp	r0, #2
 800189e:	d9f6      	bls.n	800188e <HAL_RCC_OscConfig+0x2fe>
 80018a0:	e6b8      	b.n	8001614 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a2:	2801      	cmp	r0, #1
 80018a4:	f43f aeb7 	beq.w	8001616 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80018a8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	6a2b      	ldr	r3, [r5, #32]
 80018ac:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f47f ae71 	bne.w	8001598 <HAL_RCC_OscConfig+0x8>
 80018b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80018bc:	1ac0      	subs	r0, r0, r3
 80018be:	bf18      	it	ne
 80018c0:	2001      	movne	r0, #1
 80018c2:	e6a8      	b.n	8001616 <HAL_RCC_OscConfig+0x86>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	42420060 	.word	0x42420060

080018cc <HAL_RCC_GetSysClockFreq>:
{
 80018cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80018d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018d2:	ac02      	add	r4, sp, #8
 80018d4:	f103 0510 	add.w	r5, r3, #16
 80018d8:	4622      	mov	r2, r4
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	3308      	adds	r3, #8
 80018e0:	c203      	stmia	r2!, {r0, r1}
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	4614      	mov	r4, r2
 80018e6:	d1f7      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018e8:	2301      	movs	r3, #1
 80018ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80018ee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80018f0:	4911      	ldr	r1, [pc, #68]	; (8001938 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80018f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018f8:	f003 020c 	and.w	r2, r3, #12
 80018fc:	2a08      	cmp	r2, #8
 80018fe:	d117      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001900:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001904:	a806      	add	r0, sp, #24
 8001906:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001908:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800190e:	d50c      	bpl.n	800192a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001910:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001912:	480a      	ldr	r0, [pc, #40]	; (800193c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001914:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001918:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800191a:	aa06      	add	r2, sp, #24
 800191c:	4413      	add	r3, r2
 800191e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001922:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001926:	b007      	add	sp, #28
 8001928:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <HAL_RCC_GetSysClockFreq+0x74>)
 800192c:	4350      	muls	r0, r2
 800192e:	e7fa      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001932:	e7f8      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x5a>
 8001934:	0800214c 	.word	0x0800214c
 8001938:	40021000 	.word	0x40021000
 800193c:	007a1200 	.word	0x007a1200
 8001940:	003d0900 	.word	0x003d0900

08001944 <HAL_RCC_ClockConfig>:
{
 8001944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001948:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800194a:	4604      	mov	r4, r0
 800194c:	b910      	cbnz	r0, 8001954 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
 8001950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <HAL_RCC_ClockConfig+0x128>)
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	428b      	cmp	r3, r1
 800195e:	d329      	bcc.n	80019b4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	078e      	lsls	r6, r1, #30
 8001964:	d431      	bmi.n	80019ca <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	07ca      	lsls	r2, r1, #31
 8001968:	d444      	bmi.n	80019f4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800196a:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_RCC_ClockConfig+0x128>)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	429d      	cmp	r5, r3
 8001974:	d367      	bcc.n	8001a46 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	4d3d      	ldr	r5, [pc, #244]	; (8001a70 <HAL_RCC_ClockConfig+0x12c>)
 800197a:	f012 0f04 	tst.w	r2, #4
 800197e:	d16e      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	0713      	lsls	r3, r2, #28
 8001982:	d506      	bpl.n	8001992 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001984:	686b      	ldr	r3, [r5, #4]
 8001986:	6922      	ldr	r2, [r4, #16]
 8001988:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800198c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001990:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001992:	f7ff ff9b 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8001996:	686b      	ldr	r3, [r5, #4]
 8001998:	4a36      	ldr	r2, [pc, #216]	; (8001a74 <HAL_RCC_ClockConfig+0x130>)
 800199a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	40d8      	lsrs	r0, r3
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_RCC_ClockConfig+0x134>)
 80019a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_ClockConfig+0x138>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	f7ff f921 	bl	8000bf0 <HAL_InitTick>
  return HAL_OK;
 80019ae:	2000      	movs	r0, #0
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	6813      	ldr	r3, [r2, #0]
 80019b6:	f023 0307 	bic.w	r3, r3, #7
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4299      	cmp	r1, r3
 80019c6:	d1c2      	bne.n	800194e <HAL_RCC_ClockConfig+0xa>
 80019c8:	e7ca      	b.n	8001960 <HAL_RCC_ClockConfig+0x1c>
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	bf1e      	ittt	ne
 80019d2:	685a      	ldrne	r2, [r3, #4]
 80019d4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80019d8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	bf42      	ittt	mi
 80019de:	685a      	ldrmi	r2, [r3, #4]
 80019e0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80019e4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	68a0      	ldr	r0, [r4, #8]
 80019ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019ee:	4302      	orrs	r2, r0
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e7b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	6862      	ldr	r2, [r4, #4]
 80019f6:	4e1e      	ldr	r6, [pc, #120]	; (8001a70 <HAL_RCC_ClockConfig+0x12c>)
 80019f8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fc:	d11b      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	d0a4      	beq.n	800194e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a04:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a12:	f7ff f92f 	bl	8000c74 <HAL_GetTick>
 8001a16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a18:	6873      	ldr	r3, [r6, #4]
 8001a1a:	6862      	ldr	r2, [r4, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a24:	d0a1      	beq.n	800196a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7ff f925 	bl	8000c74 <HAL_GetTick>
 8001a2a:	1bc0      	subs	r0, r0, r7
 8001a2c:	4540      	cmp	r0, r8
 8001a2e:	d9f3      	bls.n	8001a18 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
}
 8001a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	2a02      	cmp	r2, #2
 8001a38:	d102      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a3e:	e7e0      	b.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	f013 0f02 	tst.w	r3, #2
 8001a44:	e7dd      	b.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f023 0307 	bic.w	r3, r3, #7
 8001a4c:	432b      	orrs	r3, r5
 8001a4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	429d      	cmp	r5, r3
 8001a58:	f47f af79 	bne.w	800194e <HAL_RCC_ClockConfig+0xa>
 8001a5c:	e78b      	b.n	8001976 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5e:	686b      	ldr	r3, [r5, #4]
 8001a60:	68e1      	ldr	r1, [r4, #12]
 8001a62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a66:	430b      	orrs	r3, r1
 8001a68:	606b      	str	r3, [r5, #4]
 8001a6a:	e789      	b.n	8001980 <HAL_RCC_ClockConfig+0x3c>
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	0800215c 	.word	0x0800215c
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a8e:	6810      	ldr	r0, [r2, #0]
}
 8001a90:	40d8      	lsrs	r0, r3
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	0800216c 	.word	0x0800216c
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001aae:	6810      	ldr	r0, [r2, #0]
}
 8001ab0:	40d8      	lsrs	r0, r3
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	0800216c 	.word	0x0800216c
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ac0:	6803      	ldr	r3, [r0, #0]
{
 8001ac2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ac6:	07d9      	lsls	r1, r3, #31
{
 8001ac8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aca:	d520      	bpl.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001acc:	4c35      	ldr	r4, [pc, #212]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ace:	69e3      	ldr	r3, [r4, #28]
 8001ad0:	00da      	lsls	r2, r3, #3
 8001ad2:	d432      	bmi.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ad4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	69e3      	ldr	r3, [r4, #28]
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61e3      	str	r3, [r4, #28]
 8001ade:	69e3      	ldr	r3, [r4, #28]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4e2f      	ldr	r6, [pc, #188]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001aea:	6833      	ldr	r3, [r6, #0]
 8001aec:	05db      	lsls	r3, r3, #23
 8001aee:	d526      	bpl.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001af0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001af6:	d136      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001af8:	6a23      	ldr	r3, [r4, #32]
 8001afa:	686a      	ldr	r2, [r5, #4]
 8001afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b00:	4313      	orrs	r3, r2
 8001b02:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b04:	b11f      	cbz	r7, 8001b0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	69e3      	ldr	r3, [r4, #28]
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b0e:	6828      	ldr	r0, [r5, #0]
 8001b10:	0783      	lsls	r3, r0, #30
 8001b12:	d506      	bpl.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b14:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b16:	68a9      	ldr	r1, [r5, #8]
 8001b18:	6853      	ldr	r3, [r2, #4]
 8001b1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b22:	f010 0010 	ands.w	r0, r0, #16
 8001b26:	d01b      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b2a:	68e9      	ldr	r1, [r5, #12]
 8001b2c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b2e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6053      	str	r3, [r2, #4]
 8001b38:	e012      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2700      	movs	r7, #0
 8001b3c:	e7d4      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	6833      	ldr	r3, [r6, #0]
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b46:	f7ff f895 	bl	8000c74 <HAL_GetTick>
 8001b4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	6833      	ldr	r3, [r6, #0]
 8001b4e:	05d8      	lsls	r0, r3, #23
 8001b50:	d4ce      	bmi.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff f88f 	bl	8000c74 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2864      	cmp	r0, #100	; 0x64
 8001b5c:	d9f6      	bls.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001b5e:	2003      	movs	r0, #3
}
 8001b60:	b002      	add	sp, #8
 8001b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b66:	686a      	ldr	r2, [r5, #4]
 8001b68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d0c3      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b70:	2001      	movs	r0, #1
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b74:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b76:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b78:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b7e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001b80:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b82:	07d9      	lsls	r1, r3, #31
 8001b84:	d5b8      	bpl.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001b86:	f7ff f875 	bl	8000c74 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001b8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	6a23      	ldr	r3, [r4, #32]
 8001b92:	079a      	lsls	r2, r3, #30
 8001b94:	d4b0      	bmi.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff f86d 	bl	8000c74 <HAL_GetTick>
 8001b9a:	1b80      	subs	r0, r0, r6
 8001b9c:	4540      	cmp	r0, r8
 8001b9e:	d9f7      	bls.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001ba0:	e7dd      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420440 	.word	0x42420440

08001bb0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb0:	6a03      	ldr	r3, [r0, #32]
{
 8001bb2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bbc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bbe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bc2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bc6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bc8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001bca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001bce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bd0:	4d0a      	ldr	r5, [pc, #40]	; (8001bfc <TIM_OC1_SetConfig+0x4c>)
 8001bd2:	42a8      	cmp	r0, r5
 8001bd4:	d10b      	bne.n	8001bee <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bd6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bd8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bdc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bde:	698e      	ldr	r6, [r1, #24]
 8001be0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001be2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001be6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001be8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bec:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bf0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bf2:	684a      	ldr	r2, [r1, #4]
 8001bf4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf6:	6203      	str	r3, [r0, #32]
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40012c00 	.word	0x40012c00

08001c00 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c00:	6a03      	ldr	r3, [r0, #32]
{
 8001c02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c12:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c16:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c18:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c22:	4d0b      	ldr	r5, [pc, #44]	; (8001c50 <TIM_OC3_SetConfig+0x50>)
 8001c24:	42a8      	cmp	r0, r5
 8001c26:	d10d      	bne.n	8001c44 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c28:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c32:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c36:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c3a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c40:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c48:	684a      	ldr	r2, [r1, #4]
 8001c4a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c4c:	6203      	str	r3, [r0, #32]
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	40012c00 	.word	0x40012c00

08001c54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c54:	6a03      	ldr	r3, [r0, #32]
{
 8001c56:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c62:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c74:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c78:	4d06      	ldr	r5, [pc, #24]	; (8001c94 <TIM_OC4_SetConfig+0x40>)
 8001c7a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c7c:	bf02      	ittt	eq
 8001c7e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c80:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c84:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c8a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c8c:	684a      	ldr	r2, [r1, #4]
 8001c8e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c90:	6203      	str	r3, [r0, #32]
 8001c92:	bd30      	pop	{r4, r5, pc}
 8001c94:	40012c00 	.word	0x40012c00

08001c98 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001ca8:	bf1e      	ittt	ne
 8001caa:	681a      	ldrne	r2, [r3, #0]
 8001cac:	f042 0201 	orrne.w	r2, r2, #1
 8001cb0:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001cb8:	2000      	movs	r0, #0
 8001cba:	4770      	bx	lr

08001cbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001cbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc0:	4290      	cmp	r0, r2
 8001cc2:	d00a      	beq.n	8001cda <TIM_Base_SetConfig+0x1e>
 8001cc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cc8:	d007      	beq.n	8001cda <TIM_Base_SetConfig+0x1e>
 8001cca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d003      	beq.n	8001cda <TIM_Base_SetConfig+0x1e>
 8001cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cd6:	4290      	cmp	r0, r2
 8001cd8:	d115      	bne.n	8001d06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001cda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ce0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <TIM_Base_SetConfig+0x6c>)
 8001ce4:	4290      	cmp	r0, r2
 8001ce6:	d00a      	beq.n	8001cfe <TIM_Base_SetConfig+0x42>
 8001ce8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cec:	d007      	beq.n	8001cfe <TIM_Base_SetConfig+0x42>
 8001cee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d003      	beq.n	8001cfe <TIM_Base_SetConfig+0x42>
 8001cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cfa:	4290      	cmp	r0, r2
 8001cfc:	d103      	bne.n	8001d06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d06:	694a      	ldr	r2, [r1, #20]
 8001d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d10:	688b      	ldr	r3, [r1, #8]
 8001d12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d14:	680b      	ldr	r3, [r1, #0]
 8001d16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <TIM_Base_SetConfig+0x6c>)
 8001d1a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001d1c:	bf04      	itt	eq
 8001d1e:	690b      	ldreq	r3, [r1, #16]
 8001d20:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001d22:	2301      	movs	r3, #1
 8001d24:	6143      	str	r3, [r0, #20]
 8001d26:	4770      	bx	lr
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <HAL_TIM_Base_Init>:
{
 8001d2c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001d2e:	4604      	mov	r4, r0
 8001d30:	b1a0      	cbz	r0, 8001d5c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d3a:	b91b      	cbnz	r3, 8001d44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d40:	f7fe fee2 	bl	8000b08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d46:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4c:	1d21      	adds	r1, r4, #4
 8001d4e:	f7ff ffb5 	bl	8001cbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	2301      	movs	r3, #1
  return HAL_OK;
 8001d54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	bd10      	pop	{r4, pc}

08001d60 <HAL_TIM_OC_Init>:
{
 8001d60:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001d62:	4604      	mov	r4, r0
 8001d64:	b1a0      	cbz	r0, 8001d90 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d6e:	b91b      	cbnz	r3, 8001d78 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001d74:	f7fe fedc 	bl	8000b30 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d7a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d80:	1d21      	adds	r1, r4, #4
 8001d82:	f7ff ff9b 	bl	8001cbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	2301      	movs	r3, #1
  return HAL_OK;
 8001d88:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
}
 8001d92:	bd10      	pop	{r4, pc}

08001d94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d94:	6a03      	ldr	r3, [r0, #32]
{
 8001d96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d98:	f023 0310 	bic.w	r3, r3, #16
 8001d9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001d9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001da0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001da2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001da4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001da6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001daa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001db0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001db4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001db8:	4d0b      	ldr	r5, [pc, #44]	; (8001de8 <TIM_OC2_SetConfig+0x54>)
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d10d      	bne.n	8001dda <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dbe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001dc8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001dca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dcc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001dd0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001dd6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001dda:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ddc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001dde:	684a      	ldr	r2, [r1, #4]
 8001de0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001de2:	6203      	str	r3, [r0, #32]
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00

08001dec <HAL_TIM_OC_ConfigChannel>:
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001dee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001df2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f04f 0002 	mov.w	r0, #2
 8001dfa:	d018      	beq.n	8001e2e <HAL_TIM_OC_ConfigChannel+0x42>
 8001dfc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001e02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001e06:	461d      	mov	r5, r3
  switch (Channel)
 8001e08:	2a0c      	cmp	r2, #12
 8001e0a:	d80b      	bhi.n	8001e24 <HAL_TIM_OC_ConfigChannel+0x38>
 8001e0c:	e8df f002 	tbb	[pc, r2]
 8001e10:	0a0a0a07 	.word	0x0a0a0a07
 8001e14:	0a0a0a10 	.word	0x0a0a0a10
 8001e18:	0a0a0a14 	.word	0x0a0a0a14
 8001e1c:	18          	.byte	0x18
 8001e1d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e1e:	6820      	ldr	r0, [r4, #0]
 8001e20:	f7ff fec6 	bl	8001bb0 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001e24:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e2a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	f7ff ffaf 	bl	8001d94 <TIM_OC2_SetConfig>
      break;
 8001e36:	e7f5      	b.n	8001e24 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e38:	6820      	ldr	r0, [r4, #0]
 8001e3a:	f7ff fee1 	bl	8001c00 <TIM_OC3_SetConfig>
      break;
 8001e3e:	e7f1      	b.n	8001e24 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f7ff ff07 	bl	8001c54 <TIM_OC4_SetConfig>
      break;
 8001e46:	e7ed      	b.n	8001e24 <HAL_TIM_OC_ConfigChannel+0x38>

08001e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e48:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e4a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e4c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e52:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001e56:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e58:	6083      	str	r3, [r0, #8]
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001e62:	2b01      	cmp	r3, #1
{
 8001e64:	4604      	mov	r4, r0
 8001e66:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e6a:	d019      	beq.n	8001ea0 <HAL_TIM_ConfigClockSource+0x44>
 8001e6c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001e72:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001e74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e82:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e84:	680b      	ldr	r3, [r1, #0]
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d065      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0xfa>
 8001e8a:	d815      	bhi.n	8001eb8 <HAL_TIM_ConfigClockSource+0x5c>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d00c      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x4e>
 8001e90:	d807      	bhi.n	8001ea2 <HAL_TIM_ConfigClockSource+0x46>
 8001e92:	b153      	cbz	r3, 8001eaa <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e96:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d001      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x4e>
 8001ea6:	2b30      	cmp	r3, #48	; 0x30
 8001ea8:	d1f4      	bne.n	8001e94 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001eaa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eac:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	e01a      	b.n	8001eee <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d034      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0xca>
 8001ebc:	d819      	bhi.n	8001ef2 <HAL_TIM_ConfigClockSource+0x96>
 8001ebe:	2b50      	cmp	r3, #80	; 0x50
 8001ec0:	d1e8      	bne.n	8001e94 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ec6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ece:	f025 0501 	bic.w	r5, r5, #1
 8001ed2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ed4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001ed6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001edc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001ee0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ee2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ee4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001eee:	6083      	str	r3, [r0, #8]
 8001ef0:	e7d0      	b.n	8001e94 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001ef2:	2b70      	cmp	r3, #112	; 0x70
 8001ef4:	d00c      	beq.n	8001f10 <HAL_TIM_ConfigClockSource+0xb4>
 8001ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001efa:	d1cb      	bne.n	8001e94 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001efc:	68cb      	ldr	r3, [r1, #12]
 8001efe:	684a      	ldr	r2, [r1, #4]
 8001f00:	6889      	ldr	r1, [r1, #8]
 8001f02:	f7ff ffa1 	bl	8001e48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	6893      	ldr	r3, [r2, #8]
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0e:	e008      	b.n	8001f22 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001f10:	68cb      	ldr	r3, [r1, #12]
 8001f12:	684a      	ldr	r2, [r1, #4]
 8001f14:	6889      	ldr	r1, [r1, #8]
 8001f16:	f7ff ff97 	bl	8001e48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f22:	6093      	str	r3, [r2, #8]
      break;
 8001f24:	e7b6      	b.n	8001e94 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f26:	684d      	ldr	r5, [r1, #4]
 8001f28:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f2a:	6a01      	ldr	r1, [r0, #32]
 8001f2c:	f021 0110 	bic.w	r1, r1, #16
 8001f30:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f32:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f34:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f36:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f42:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f46:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f4a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f50:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001f54:	e7cb      	b.n	8001eee <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f56:	684a      	ldr	r2, [r1, #4]
 8001f58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f5a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f5e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f62:	f025 0501 	bic.w	r5, r5, #1
 8001f66:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f68:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001f6a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f70:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001f74:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f76:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f7e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001f82:	e7b4      	b.n	8001eee <HAL_TIM_ConfigClockSource+0x92>

08001f84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f88:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	f04f 0302 	mov.w	r3, #2
 8001f90:	d014      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f92:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001f98:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f9a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f9e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fa8:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001faa:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fac:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fae:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001fbc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001fbe:	bd30      	pop	{r4, r5, pc}

08001fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	68c1      	ldr	r1, [r0, #12]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	2419      	movs	r4, #25
 8001fcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fd4:	6882      	ldr	r2, [r0, #8]
 8001fd6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001fd8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fda:	4302      	orrs	r2, r0
 8001fdc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001fde:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001fe2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fe6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	69a9      	ldr	r1, [r5, #24]
 8001ff0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <UART_SetConfig+0x70>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d114      	bne.n	8002028 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ffe:	f7ff fd4f 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002002:	4360      	muls	r0, r4
 8002004:	686c      	ldr	r4, [r5, #4]
 8002006:	2264      	movs	r2, #100	; 0x64
 8002008:	00a4      	lsls	r4, r4, #2
 800200a:	fbb0 f0f4 	udiv	r0, r0, r4
 800200e:	fbb0 f4f2 	udiv	r4, r0, r2
 8002012:	fb02 0314 	mls	r3, r2, r4, r0
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	3332      	adds	r3, #50	; 0x32
 800201a:	fbb3 f3f2 	udiv	r3, r3, r2
 800201e:	6829      	ldr	r1, [r5, #0]
 8002020:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002024:	608b      	str	r3, [r1, #8]
 8002026:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002028:	f7ff fd2a 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 800202c:	e7e9      	b.n	8002002 <UART_SetConfig+0x42>
 800202e:	bf00      	nop
 8002030:	40013800 	.word	0x40013800

08002034 <HAL_UART_Init>:
{
 8002034:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002036:	4604      	mov	r4, r0
 8002038:	b340      	cbz	r0, 800208c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800203a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800203e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002042:	b91b      	cbnz	r3, 800204c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002044:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002048:	f7fe fda2 	bl	8000b90 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800204e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002054:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002056:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800205c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800205e:	f7ff ffaf 	bl	8001fc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002064:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800206c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002074:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800207e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002080:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002082:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002086:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800208a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800208c:	2001      	movs	r0, #1
}
 800208e:	bd10      	pop	{r4, pc}

08002090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002090:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002092:	e003      	b.n	800209c <LoopCopyDataInit>

08002094 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002096:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002098:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800209a:	3104      	adds	r1, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800209c:	480a      	ldr	r0, [pc, #40]	; (80020c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80020a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020a4:	d3f6      	bcc.n	8002094 <CopyDataInit>
  ldr r2, =_sbss
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a8:	e002      	b.n	80020b0 <LoopFillZerobss>

080020aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020ac:	f842 3b04 	str.w	r3, [r2], #4

080020b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020b4:	d3f9      	bcc.n	80020aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b6:	f7fe fc97 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f000 f80f 	bl	80020dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020be:	f7fe fbe5 	bl	800088c <main>
  bx lr
 80020c2:	4770      	bx	lr
  ldr r3, =_sidata
 80020c4:	0800217c 	.word	0x0800217c
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020cc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80020d0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80020d4:	20000180 	.word	0x20000180

080020d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC1_2_IRQHandler>
	...

080020dc <__libc_init_array>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	2500      	movs	r5, #0
 80020e0:	4e0c      	ldr	r6, [pc, #48]	; (8002114 <__libc_init_array+0x38>)
 80020e2:	4c0d      	ldr	r4, [pc, #52]	; (8002118 <__libc_init_array+0x3c>)
 80020e4:	1ba4      	subs	r4, r4, r6
 80020e6:	10a4      	asrs	r4, r4, #2
 80020e8:	42a5      	cmp	r5, r4
 80020ea:	d109      	bne.n	8002100 <__libc_init_array+0x24>
 80020ec:	f000 f822 	bl	8002134 <_init>
 80020f0:	2500      	movs	r5, #0
 80020f2:	4e0a      	ldr	r6, [pc, #40]	; (800211c <__libc_init_array+0x40>)
 80020f4:	4c0a      	ldr	r4, [pc, #40]	; (8002120 <__libc_init_array+0x44>)
 80020f6:	1ba4      	subs	r4, r4, r6
 80020f8:	10a4      	asrs	r4, r4, #2
 80020fa:	42a5      	cmp	r5, r4
 80020fc:	d105      	bne.n	800210a <__libc_init_array+0x2e>
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002104:	4798      	blx	r3
 8002106:	3501      	adds	r5, #1
 8002108:	e7ee      	b.n	80020e8 <__libc_init_array+0xc>
 800210a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800210e:	4798      	blx	r3
 8002110:	3501      	adds	r5, #1
 8002112:	e7f2      	b.n	80020fa <__libc_init_array+0x1e>
 8002114:	08002174 	.word	0x08002174
 8002118:	08002174 	.word	0x08002174
 800211c:	08002174 	.word	0x08002174
 8002120:	08002178 	.word	0x08002178

08002124 <memset>:
 8002124:	4603      	mov	r3, r0
 8002126:	4402      	add	r2, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	d100      	bne.n	800212e <memset+0xa>
 800212c:	4770      	bx	lr
 800212e:	f803 1b01 	strb.w	r1, [r3], #1
 8002132:	e7f9      	b.n	8002128 <memset+0x4>

08002134 <_init>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr

08002140 <_fini>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr
